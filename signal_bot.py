import os
import logging
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not BOT_TOKEN or not CHAT_ID:
    logger.error("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –í—ã—Ö–æ–¥.")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API (–ø—Ä–∏–º–µ—Ä: Binance)
def get_price(symbol="ADAUSDT"):
    try:
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
        response = requests.get(url, timeout=5)
        data = response.json()
        return float(data["price"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å!")

# –ö–æ–º–∞–Ω–¥–∞ /price
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbols = ["ADAUSDT", "XRPUSDT", "SOLUSDT"]
    reply = "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n"
    for s in symbols:
        p = get_price(s)
        reply += f"{s}: {p}\n" if p else f"{s}: –æ—à–∏–±–∫–∞\n"
    await update.message.reply_text(reply)

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("price", price))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
