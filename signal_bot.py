# signal_bot.py
import os
import json
import time
import logging
import signal
import sys
from datetime import datetime, timedelta, timezone

import pytz
import ccxt
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8451464428:AAHgmnQGnw7i13XKU4SZd6KClZ33vcJtdhU')
CHAT_ID = os.environ.get('CHAT_ID', '430720211')
ALLOWED_CHAT_IDS = {int(CHAT_ID)}

TZ = pytz.timezone("Asia/Almaty")
PULSE_MINUTE = 1

STATE_FILE = "state.json"
RUN_LOG = "bot.log"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)  # –í–∞–∂–Ω–æ –¥–ª—è Railway!
    ]
)
logger = logging.getLogger(__name__)

def log(line: str):
    logger.info(line)
    print(f"[{datetime.now()}] {line}", flush=True)  # flush=True –¥–ª—è Railway

# ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def load_json(path: str, default):
    try:
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        log(f"ERR load_json({path}): {e}")
    return default

def save_json(path: str, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log(f"ERR save_json({path}): {e}")

def now_tz():
    return datetime.now(TZ)

# ==================== –°–û–°–¢–û–Ø–ù–ò–ï ====================
def load_state():
    return load_json(STATE_FILE, {"enabled": True, "monitored_symbols": ["SOLUSDT", "ADAUSDT"]})

def save_state(state: dict):
    save_json(STATE_FILE, state)

# ==================== BYBIT API ====================
CCXT_SYMBOLS = {
    "SOLUSDT": "SOL/USDT:USDT",
    "ADAUSDT": "ADA/USDT:USDT", 
    "BTCUSDT": "BTC/USDT:USDT",
}

exchange = ccxt.bybit({
    "enableRateLimit": True,
    "options": {"defaultType": "future"}
})

# ==================== –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê ====================
def fetch_last_closed_h1_candle(symbol_bot: str):
    market = CCXT_SYMBOLS.get(symbol_bot)
    if not market:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª {symbol_bot}")
    ohlcv = exchange.fetch_ohlcv(market, timeframe="1h", limit=2)
    if not ohlcv or len(ohlcv) < 2:
        raise RuntimeError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö OHLCV")
    ts, op, hi, lo, cl, vol = ohlcv[-2]
    t_open = datetime.fromtimestamp(ts / 1000, tz=timezone.utc).astimezone(TZ)
    t_close = t_open + timedelta(hours=1)
    return {
        "t_open": t_open, "t_close": t_close,
        "open": float(op), "high": float(hi), "low": float(lo),
        "close": float(cl), "volume": float(vol),
    }

def get_prev_levels(symbol: str, level_tf: str = "1d"):
    if level_tf == "1d":
        d = fetch_last_closed_d1(symbol)
    elif level_tf == "4h":
        d = fetch_last_closed_h4(symbol)
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π level_tf: {level_tf}")
    return d["open"], d["high"], d["low"], d["close"]

def fetch_last_closed_d1(symbol_bot: str):
    market = CCXT_SYMBOLS.get(symbol_bot)
    if not market:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª {symbol_bot}")
    ohlcv = exchange.fetch_ohlcv(market, timeframe="1d", limit=3)
    if not ohlcv or len(ohlcv) < 2:
        raise RuntimeError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö D1")
    ts, op, hi, lo, cl, vol = ohlcv[-2]
    t_open = datetime.fromtimestamp(ts / 1000, tz=timezone.utc).astimezone(TZ)
    t_close = t_open + timedelta(days=1)
    return {
        "t_open": t_open, "t_close": t_close,
        "open": float(op), "high": float(hi), "low": float(lo),
        "close": float(cl), "volume": float(vol)
    }

def fetch_last_closed_h4(symbol_bot: str):
    market = CCXT_SYMBOLS.get(symbol_bot)
    if not market:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª {symbol_bot}")
    ohlcv = exchange.fetch_ohlcv(market, timeframe="4h", limit=3)
    if not ohlcv or len(ohlcv) < 2:
        raise RuntimeError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö H4")
    ts, op, hi, lo, cl, vol = ohlcv[-2]
    t_open = datetime.fromtimestamp(ts / 1000, tz=timezone.utc).astimezone(TZ)
    t_close = t_open + timedelta(hours=4)
    return {
        "t_open": t_open, "t_close": t_close,
        "open": float(op), "high": float(hi), "low": float(lo),
        "close": float(cl), "volume": float(vol)
    }

# ==================== –§–û–†–ú–ê–¢ –û–¢–ß–ï–¢–ê ====================
def fmt_candle_report(symbol: str, c: dict, tf: str = "1h") -> str:
    return (
        f"üìä –û—Ç—á—ë—Ç –ø–æ –∑–∞–∫—Ä—ã—Ç–æ–π {tf.upper()}:\n\n"
        f"–ê–∫—Ç–∏–≤: {symbol}\n"
        f"–í—Ä–µ–º—è: {c['t_open'].strftime('%d.%m.%Y –≥. %H:00')}-{c['t_close'].strftime('%H:00')}\n"
        f"–°–≤–µ—á–∞: {tf.upper()}\n"
        f"–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {c['open']:.6f}\n"
        f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {c['close']:.6f}\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä —Å–≤–µ—á–∏: {'üü¢ –ó–µ–ª—ë–Ω–∞—è' if c['close']>=c['open'] else 'üî¥ –ö—Ä–∞—Å–Ω–∞—è'}\n"
        f"üìà –ú–∞–∫—Å–∏–º—É–º: {c['high']:.6f}\n"
        f"üìâ –ú–∏–Ω–∏–º—É–º: {c['low']:.6f}\n"
        f"üìä –û–±—ä—ë–º: {c['volume']:.2f}"
    )

# ==================== TELEGRAM –ö–û–ú–ê–ù–î–´ ====================
def ensure_chat_allowed(update: Update) -> bool:
    return (update.effective_chat and update.effective_chat.id in ALLOWED_CHAT_IDS)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_chat_allowed(update): return
    state = load_state(); state["enabled"] = True; save_state(state)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã: /status, /stop")

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_chat_allowed(update): return
    state = load_state(); state["enabled"] = False; save_state(state)
    await update.message.reply_text("‚è∏ –ü–∞—É–∑–∞. /start ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ensure_chat_allowed(update): return
    state = load_state()
    txt = f"ü§ñ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–ö–õ' if state.get('enabled', True) else '‚è∏ –í–´–ö–õ'}\n"
    txt += f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {', '.join(state.get('monitored_symbols', []))}\n"
    txt += f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {now_tz().strftime('%d.%m.%Y %H:%M:%S %Z')}"
    await update.message.reply_text(txt)

async def echo_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text: return
    if update.message.text.strip().lower() == "ping":
        await update.message.reply_text("üèì pong")

# ==================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ====================
def compute_next_pulse(now_dt: datetime) -> datetime:
    base = now_dt.replace(second=0, microsecond=0)
    candidate = base.replace(minute=PULSE_MINUTE)
    if candidate <= now_dt:
        candidate += timedelta(hours=1)
    return candidate

async def hourly_pulse_job(context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    if not state.get("enabled", True):
        return

    symbols = state.get("monitored_symbols", ["SOLUSDT", "ADAUSDT"])
    log(f"üîî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ –¥–ª—è: {symbols}")

    for sym in symbols:
        try:
            candle = fetch_last_closed_h1_candle(sym)
            report = fmt_candle_report(sym, candle)
            
            for cid in ALLOWED_CHAT_IDS:
                try:
                    await context.bot.send_message(chat_id=cid, text=report)
                    log(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –¥–ª—è {sym}")
                except Exception as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {sym}: {e}")
                    
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–ª—å—Å–∞ {sym}: {e}")

# ==================== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ ====================
def graceful_shutdown(signum, frame):
    log("üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
    try:
        state = load_state()
        save_state(state)
        log("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    sys.exit(0)

signal.signal(signal.SIGINT, graceful_shutdown)
signal.signal(signal.SIGTERM, graceful_shutdown)

# ==================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================
def build_app():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_ping))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    next_pulse = compute_next_pulse(now_tz())
    first_delay = max(0.0, (next_pulse - now_tz()).total_seconds())
    
    app.job_queue.run_repeating(
        hourly_pulse_job,
        interval=3600,
        first=first_delay,
        name="hourly_pulse"
    )
    
    log(f"‚è∞ –ü–µ—Ä–≤—ã–π –ø—É–ª—å—Å –≤: {next_pulse.strftime('%H:%M:%S')}")
    return app

def main():
    log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Railway...")
    log(f"üë§ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã: {ALLOWED_CHAT_IDS}")
    log(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {TZ}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
        markets = exchange.load_markets()
        log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
        return

    try:
        app = build_app()
        log("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        app.run_polling()
    except Exception as e:
        log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
        main()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

if __name__ == "__main__":
    main()
